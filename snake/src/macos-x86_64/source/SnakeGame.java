/* autogenerated by Processing revision 1286 on 2023-05-16 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class SnakeGame extends PApplet {

//Rafid Aayan, Steven Babcock 
SnakeHead snek1;
ArrayList<Food> foods = new ArrayList<Food>();
int frametime = 500;
Time frame;
int offsety = 50;
int score = 0;
boolean end;
int endtime = 0;

 public void settings(){size(850, 850 + offsety);}

 public void setup() {
  snek1 = new SnakeHead(width/2,+height/2+offsety/2);
  frame = new Time(frametime);
 
  frame.start();
  foods.add(new Food(PApplet.parseInt(random(16))*50+25,PApplet.parseInt(random(16))*50+25+offsety,snek1));
  end = false;
}

 public void draw() {
  if (end) {
  background(0);
  fill(250);
  textAlign(CENTER);
  text("Game Over :( \n Press any key to start over", width/2, height/2);
  if (keyPressed) {
  snek1 = new SnakeHead(width/2,+height/2+offsety/2);
  frame = new Time(frametime);
  frame.start();
  foods = new ArrayList<Food>();
  foods.add(new Food(PApplet.parseInt(random(16))*50+25,PApplet.parseInt(random(16))*50+25+offsety,snek1));
  score = 0;
  endtime = millis();
  end = false;
  }
  } else {
  
  background(133,224,76);
  infoPanel();
  snek1.display();
  for (int i=0;i<foods.size();i++) {
      foods.get(i).display();
    }
  if (frame.isFinished()) {
    snek1.move();
    
    for (int i=0;i<foods.size();i++) {
      if (foods.get(i).intersect(snek1)) {
        foods.remove(i);
        foods.add(new Food(PApplet.parseInt(random(16))*50+25,PApplet.parseInt(random(16))*50+25+offsety,snek1));
        
        snek1.body.add(new SnakeBody(snek1.body.get(snek1.body.size()-1).x,snek1.body.get(snek1.body.size()-1).y,snek1.cb));
        snek1.bodylength++;
        score++;
      }
    }
    
      if (snek1.intersect(snek1)) {
    end = true;
  }
    
    frame.start();
  }}

}

 public void keyPressed() {
  println(keyCode);
  
  switch (keyCode) {
  case 87: snek1.turn("up"); break; 
  case 65: snek1.turn("left"); break; 
  case 83: snek1.turn("down"); break; 
  case 68: snek1.turn("right"); break; 
  case 38: snek1.turn("up"); break; 
  case 37: snek1.turn("left"); break; 
  case 40: snek1.turn("down"); break; 
  case 39: snek1.turn("right"); break; 
  }
}

 public void infoPanel() {
  fill(255, 100);
  rectMode(CENTER);
  rect(width/2, 25, width, 50);
  fill(80, 80, 80);
  textSize(40);
  textAlign(CENTER);
  text("Score: "+ score +"      Time: "+ (millis()/1000-endtime/1000), width/2, 40);
}
//Rafid Aayan
class Food {
  int w, h, x, y;
  PImage food;

  Food(int x, int y, SnakeHead SnakeHead) {
    w = 50;
    h = 50;
    this.x = x;
    this.y = y;
    food = loadImage("cherry.png");

    boolean b = true;
    boolean d = false;
    while (b) {
      if (d) {
        this.x = PApplet.parseInt(random(16))*50+25;
        this.y = PApplet.parseInt(random(16))*50+25+offsety;
        d = false;
      }
      for (int i=0; i<SnakeHead.body.size(); i++) {
        if (dist(this.x, this.y, SnakeHead.body.get(i).x, SnakeHead.body.get(i).y)<40) {
          d = true;
          break;
        }
      }
      if (this.intersect(SnakeHead)){d = true;}
      
      if (!d) {b = false;} //im not good enough at code to do this better
    }
  }

   public void display() {
    rectMode(CENTER);
    fill(200, 0, 0);
    rect(x, y, w, h,10);
    imageMode(CENTER);
    food.resize(w, h);
    image(food, x, y);
  }


   public boolean intersect(SnakeHead SnakeHead) {
    float d = dist(x, y, SnakeHead.x, SnakeHead.y);
    if (d<40) {
      return true;
    } else {
      return false;
    }
  }
}
//Rafid Aayan
class SnakeBody {
  int w, h, x, y;
  int cbb = 128;
  
  SnakeBody(int x, int y, int cb) {
    w = 50;
    h = 50;
    this.x = x;
    this.y = y;
    cbb = cb;
  }
  
   public void display() {
    rectMode(CENTER);
    fill(cbb);
    rect(x,y,w,h,10);
  }
  
}
//Rafid Aayan
class SnakeHead {
  String direction;
  int w, h, x, y, bodylength;
  boolean hasMoved;
  ArrayList<SnakeBody> body;
  int ch = color(0),cb = color(128);
  SnakeHead(int x,int y) {
    w = 50;
    h = 50;
    this.x = x;
    this.y = y;
    bodylength = 7; //change to 1/2/3 later (7 is for testing)
    direction = "up";
    body = new ArrayList<SnakeBody>();
    body.add(new SnakeBody(x,y+50,cb));
    for (int i=1;i<bodylength;i++) {   
      body.add(new SnakeBody(body.get(i-1).x,body.get(i-1).y+50,cb));
    }   
    hasMoved=false;
  }
  
   public void display() {
    for (int i=0;i<body.size();i++) {
      body.get(i).display();
    }  
    rectMode(CENTER);
    fill(ch);
    switch (direction) { //change to rotate textures when we get textures
  case "up": rect(x,y,w,h,25,25,10,10); break; 
  case "left": rect(x,y,w,h,25,10,10,25); break; 
  case "down": rect(x,y,w,h,10,10,25,25); break; 
  case "right": rect(x,y,w,h,10,25,25,10); break; 
  }
  }
  
   public void move() {
    
    for (int i=body.size()-1;i>0;i--) {
      body.get(i).x=body.get(i-1).x;
      body.get(i).y=body.get(i-1).y;
    } 
    body.get(0).x=x;
    body.get(0).y=y;
    if (direction == "up") {
      y-=50;
      if (y==25) {y=height-25;}
    }
    else if (direction == "down") {
      y+=50;
      if (y==height+25) {y=75;}
    }
   else if (direction == "right") {
      x+=50;
      if (x==width+25) {x=25;}
    }
    else if (direction == "left") {
      x-=50;
      if (x==-25) {x=width-25;}
    }
    hasMoved=true;
  }
  
   public void turn(String dir) {
    println(dir);
    if (hasMoved) {
    if (dir != direction) {
    if (dir == "up" && !(direction == "down")) {
      direction = "up";
      hasMoved=false;
    }
    if (dir == "left" && !(direction == "right")) {
      direction = "left";
      hasMoved=false;
    }
    if (dir == "right" && !(direction == "left")) {
      direction = "right";
      hasMoved=false;
    }
    if (dir == "down" && !(direction == "up")) {
      direction = "down";
      hasMoved=false;
    }
    }
    }
  }
  
   public boolean intersect(SnakeHead SnakeHead) {
    boolean d = false;
    for (int i=0; i<SnakeHead.body.size(); i++) {
        if (dist(this.x, this.y, SnakeHead.body.get(i).x, SnakeHead.body.get(i).y)<40) {
          d = true;
          break;
        }
  }
  //if (x<0||x>width||y<50||y>height) {
  //  d=true;
  //}
  return d;
}
}
//JL
//Daniel Shiftman 

class Time {

  int savedTime; // When Timer started
  int totalTime; // How long Timer should last

  Time(int tempTotalTime) {
    totalTime = tempTotalTime;
  }

  // Starting the timer
   public void start() {
    // When the timer starts it stores the current time in milliseconds.
    savedTime = millis();
  }

  // The function isFinished() returns true if 5,000 ms have passed. 
  // The work of the timer is farmed out to this method.
   public boolean isFinished() { 
    // Check how much time has passed
    int passedTime = millis()- savedTime;
    if (passedTime > totalTime) {
      return true;
    } else {
      return false;
    }
  }
}


  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "SnakeGame" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
